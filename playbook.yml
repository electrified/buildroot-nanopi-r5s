---
- hosts: all
  become: true
  # roles:
  #   - oefenweb.dnsmasq
  vars:
    created_username: ed2
    dnsmasq_dnsmasq_d_files_present:
      lan-setup:
        - |
          listen-address=::1,127.0.0.1,192.168.1.1,192.168.2.1
          interface=lan1, lan2
          dhcp-range=192.168.1.10,192.168.1.150,255.255.255.0,12h
          dhcp-range=192.168.2.10,192.168.2.150,255.255.255.0,12h
          dhcp-option=option:router,192.168.1.1
          dhcp-option=6,192.168.1.1
          dhcp-authoritative
          log-async
          log-queries
          log-dhcp
          domain=badgerfields.lan
  tasks:
    - name: Setup passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'

    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ created_username }}"
        state: present
        groups: sudo
        append: true
        create_home: true

    - name: Set authorized key for remote user
      ansible.posix.authorized_key:
        user: "{{ created_username }}"
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"

    - name: Disable password authentication for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin prohibit-password'
        
    - name: Rename interfaces
      copy:
        dest: "/etc/udev/rules.d/05-nanopi-r5s-eth.rules"
        content: |
          SUBSYSTEM=="net", ACTION=="add", DRIVERS=="rk_gmac-dwmac", KERNEL=="eth2", NAME="wan"
          SUBSYSTEM=="net", ACTION=="add", DRIVERS=="r8169", KERNEL=="eth0", NAME="lan1"
          SUBSYSTEM=="net", ACTION=="add", DRIVERS=="r8169", KERNEL=="eth1", NAME="lan2"
    - name: Fix leds
      copy:
        dest: "/etc/udev/rules.d/10-nanopi-r5s-led.rules"
        content: |
          SUBSYSTEM=="leds", KERNEL=="green:wan", ACTION=="add", ATTR{trigger}="netdev", ATTR{device_name}="wan", ATTR{link}="1" ATTR{rx}="1" ATTR{tx}="1"
          SUBSYSTEM=="leds", KERNEL=="green:lan1", ACTION=="add", ATTR{trigger}="netdev", ATTR{device_name}="lan1", ATTR{link}="1" ATTR{rx}="1" ATTR{tx}="1"
          SUBSYSTEM=="leds", KERNEL=="green:lan2", ACTION=="add", ATTR{trigger}="netdev", ATTR{device_name}="lan2", ATTR{link}="1" ATTR{rx}="1" ATTR{tx}="1"
    # - name: Install aptitude
    #   apt:
    #     name: aptitude
    #     state: latest
    #     update_cache: true
    # - name: Update apt and install required system packages
    #   apt:
    #     pkg:
    #       - firewalld
    #       - dnsmasq
    #       - prometheus-node-exporter
    #       - podman
    #       # - iperf3
    #       - lm-sensors
    #     state: latest
    #     update_cache: true
    - name: "Ansible | Creating a file with content"
      copy:
        dest: "/etc/network/interfaces"
        content: |
          ### Interfaces
          source /etc/network/interfaces.d/*sys

          ### Loopback network interface
          auto lo
          iface lo inet loopback

          ### Ethernet
          auto lan1
          allow-hotplug lan1
          iface lan1 inet static
          address 192.168.1.1
          netmask 255.255.255.0
          #gateway 10.0.0.1
          #dns-nameservers 8.8.8.8 8.8.4.4

          auto lan2
          allow-hotplug lan2
          iface lan2 inet static
          address 192.168.2.1
          netmask 255.255.255.0

          # auto wan
          # allow-hotplug wan
          # iface wan inet dhcp
    - name: Include the foo_app_instance role
      include_role:
        name: rivimey.ansible_role_pppoe
      vars:
        pppoe_eth_dev: wan
        pppoe_client_user: "{{pppoe_client_user}}"
        pppoe_client_password: "{{pppoe_client_password}}"
    - name: add lan 1
      ansible.posix.firewalld:
        zone: internal
        interface: lan1
        state: enabled
        permanent: yes
    - name: add lan 2
      ansible.posix.firewalld:
        zone: internal
        interface: lan2
        state: enabled
        permanent: yes
    # - name: add wan
    #   ansible.posix.firewalld:
    #     zone: external
    #     interface: wan
    #     state: enabled
    #     permanent: yes
    - name: add wan
      ansible.posix.firewalld:
        zone: external
        interface: ppp0
        state: enabled
        permanent: yes
    - name: add internal services
      ansible.posix.firewalld:
        zone: internal
        service: "{{ item }}"
        state: enabled
        permanent: yes
      loop:
        - ssh
        - dhcp
        - dhcpv6-client
        - dns
    - name: add masquerade
      ansible.posix.firewalld:
        zone: external
        masquerade: yes
        state: enabled
        permanent: yes
    - name: add masquerade
      ansible.posix.firewalld:
        zone: external
        target: DROP
        state: enabled
        permanent: yes
    - name: enable forwarding
      ansible.posix.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        state: present
        reload: yes
      loop:
      - { key: 'net.ipv4.ip_forward', value: '1' }
      - { key: 'net.ipv6.conf.all.forwarding', value: '1' }
      # allow testing with buffers up to 64MB 
      - { key: 'net.core.rmem_max', value: '67108864' }
      - { key: 'net.core.wmem_max', value: '67108864' }
      # increase Linux autotuning TCP buffer limit to 32MB
      - { key: 'net.ipv4.tcp_rmem', value: '4096 87380 33554432' }
      - { key: 'net.ipv4.tcp_wmem', value: '4096 65536 33554432' }
      # recommended default congestion control is htcp 
      - { key: 'net.ipv4.tcp_congestion_control', value: 'htcp' }
      # recommended for hosts with jumbo frames enabled
      - { key: 'net.ipv4.tcp_mtu_probing', value: '1' }
      # recommended to enable 'fair queueing'
      - { key: 'net.core.default_qdisc', value: 'fq' }
    - name: open port for node exporter
      ansible.posix.firewalld:
        port: 9100/tcp
        permanent: yes
        state: enabled
        zone: internal
    - name: open port for ntopng
      ansible.posix.firewalld:
        port: 3000/tcp
        permanent: yes
        state: enabled
        zone: internal
    - name: open port for iperf3
      ansible.posix.firewalld:
        port: 5201/tcp
        permanent: yes
        state: enabled
        zone: internal
    - name: open port for iperf3
      ansible.posix.firewalld:
        port: 5201/udp
        permanent: yes
        state: enabled
        zone: internal
    - name: Reload firewalld
      command: /usr/bin/firewall-cmd --reload
    # - name: Pull an image
    #   containers.podman.podman_image:
    #     name: docker.io/phantomski/ntopng
    # - name: Run ntopng container
    #   containers.podman.podman_container:
    #     name: ntopng
    #     image: phantomski/ntopng
    #     network: host
    #     cap_add:
    #       - CAP_NET_RAW
    #       - CAP_NET_ADMIN
    #     state: started
    #     detach: true
    #     command: /run.sh -i wan -i lan1 -i lan2 --community
    #     generate_systemd:
    #       path: /etc/systemd/system/
    #       restart_policy: always
    #       time: 120
    #       names: true
    # - name: Enable service httpd and ensure it is not masked
    #   ansible.builtin.systemd:
    #     daemon_reload: true
    #     name: container-ntopng
    #     enabled: yes
    #     masked: no
    #     state: started
